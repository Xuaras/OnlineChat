{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyProject\\\\reactstart\\\\src\\\\components\\\\Chats.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Chats() {\n  _s();\n  let user = [];\n  useEffect(() => {\n    axios.get('http://localhost:8000/api/v1/Current/', {\n      withCredentials: true\n    }).then(response => {\n      if (response.data.error) {\n        user = null; // Устанавливаем null, если есть поле error\n      } else {\n        user = response.data;\n      }\n    }).catch(error => {\n      console.error(error);\n      user = null; // Устанавливаем null в случае ошибки\n    });\n  }, []);\n  console.log(user.id);\n  const [friends, setFriends] = useState([]);\n  useEffect(() => {\n    axios.get(`http://127.0.0.1:8000/api/v1/Friends/${user.id}/`).then(response => {\n      setFriends(response.data);\n      console.log(response.data);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, []);\n  const [chat, setChat] = useState(1);\n  const toggleChat = index => {\n    setChat(index);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: friends.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"chat\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://127.0.0.1:8000${item.friend_avatar}`,\n          alt: \"Friend Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"chat_name\",\n          children: item.friend_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false);\n}\n_s(Chats, \"0FtQAAndmrrWpoZakX0kBoWBxz4=\");\n_c = Chats;\nvar _c;\n$RefreshReg$(_c, \"Chats\");","map":{"version":3,"names":["axios","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Chats","_s","user","get","withCredentials","then","response","data","error","catch","console","log","id","friends","setFriends","chat","setChat","toggleChat","index","children","map","item","class","src","friend_avatar","alt","fileName","_jsxFileName","lineNumber","columnNumber","friend_name","_c","$RefreshReg$"],"sources":["D:/MyProject/reactstart/src/components/Chats.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nexport function Chats (){\r\n    let user = [];\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/v1/Current/', { withCredentials: true })\r\n            .then(response => {\r\n                if (response.data.error) {\r\n                    user = null; // Устанавливаем null, если есть поле error\r\n                } else {\r\n                    user = response.data;\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                user = null; // Устанавливаем null в случае ошибки\r\n            });\r\n    }, []);\r\n    console.log(user.id)\r\n    const [friends, setFriends] = useState([]);\r\n    useEffect(() => {\r\n        axios.get(`http://127.0.0.1:8000/api/v1/Friends/${user.id}/`)\r\n            .then(response => {\r\n                setFriends(response.data);\r\n                console.log(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching data:', error);\r\n            });\r\n    }, []);\r\n    const [chat,setChat] = useState(1);\r\n    const toggleChat = (index)=>{\r\n        setChat(index);\r\n    }\r\n    return(\r\n    <>\r\n        {friends.map(item => {\r\n        return(\r\n            <div class=\"chat\" key={item.id}>\r\n            <img src={`http://127.0.0.1:8000${item.friend_avatar}`} alt=\"Friend Avatar\"/>\r\n            <span class=\"chat_name\">{item.friend_name}</span>\r\n        </div>);\r\n        })}\r\n    </>\r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAClC,OAAO,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACpB,IAAIC,IAAI,GAAG,EAAE;EACbP,SAAS,CAAC,MAAM;IACZF,KAAK,CAACU,GAAG,CAAC,uCAAuC,EAAE;MAAEC,eAAe,EAAE;IAAK,CAAC,CAAC,CACxEC,IAAI,CAACC,QAAQ,IAAI;MACd,IAAIA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;QACrBN,IAAI,GAAG,IAAI,CAAC,CAAC;MACjB,CAAC,MAAM;QACHA,IAAI,GAAGI,QAAQ,CAACC,IAAI;MACxB;IACJ,CAAC,CAAC,CACDE,KAAK,CAACD,KAAK,IAAI;MACZE,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;MACpBN,IAAI,GAAG,IAAI,CAAC,CAAC;IACjB,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EACNQ,OAAO,CAACC,GAAG,CAACT,IAAI,CAACU,EAAE,CAAC;EACpB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC1CC,SAAS,CAAC,MAAM;IACZF,KAAK,CAACU,GAAG,CAAC,wCAAwCD,IAAI,CAACU,EAAE,GAAG,CAAC,CACxDP,IAAI,CAACC,QAAQ,IAAI;MACdQ,UAAU,CAACR,QAAQ,CAACC,IAAI,CAAC;MACzBG,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACC,IAAI,CAAC;IAC9B,CAAC,CAAC,CACDE,KAAK,CAACD,KAAK,IAAI;MACZE,OAAO,CAACF,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EACN,MAAM,CAACO,IAAI,EAACC,OAAO,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EAClC,MAAMuB,UAAU,GAAIC,KAAK,IAAG;IACxBF,OAAO,CAACE,KAAK,CAAC;EAClB,CAAC;EACD,oBACArB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,EACKN,OAAO,CAACO,GAAG,CAACC,IAAI,IAAI;MACrB,oBACIxB,OAAA;QAAKyB,KAAK,EAAC,MAAM;QAAAH,QAAA,gBACjBtB,OAAA;UAAK0B,GAAG,EAAE,wBAAwBF,IAAI,CAACG,aAAa,EAAG;UAACC,GAAG,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAC7EhC,OAAA;UAAMyB,KAAK,EAAC,WAAW;UAAAH,QAAA,EAAEE,IAAI,CAACS;QAAW;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA,GAF1BR,IAAI,CAACT,EAAE;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAG7B,CAAC;IACN,CAAC;EAAC,gBACJ,CAAC;AAEP;AAAC5B,EAAA,CA3CeD,KAAK;AAAA+B,EAAA,GAAL/B,KAAK;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
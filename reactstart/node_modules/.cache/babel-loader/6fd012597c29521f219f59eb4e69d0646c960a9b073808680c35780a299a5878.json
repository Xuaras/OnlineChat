{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyProject\\\\reactstart\\\\src\\\\components\\\\Chats.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Chats() {\n  _s();\n  const [userData, setUserData] = useState(null); // Состояние для данных пользователя\n  const [friends, setFriends] = useState([]); // Состояние для списка друзей\n  const [chat, setChat] = useState(null); // Состояние для выбранного чата, изначально null\n\n  // Загрузка данных пользователя при монтировании компонента\n  useEffect(() => {\n    axios.get('http://localhost:8000/api/v1/Current/', {\n      withCredentials: true\n    }).then(response => {\n      setUserData(response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n\n  // Загрузка списка друзей пользователя и установка начального чата\n  useEffect(() => {\n    if (userData) {\n      axios.get(`http://localhost:8000/api/v1/Friends/${userData.id}/`, {\n        withCredentials: true\n      }).then(response => {\n        setFriends(response.data);\n        const firstFriendId = response.data[0].friend_id; // Получаем идентификатор первого друга\n        setChat(firstFriendId); // Устанавливаем первого друга как выбранный чат\n        Cookies.set('friend_chat_id', firstFriendId); // Сохраняем выбранный чат в cookies\n      }).catch(error => {\n        console.error('Ошибка при получении данных о друзьях:', error);\n      });\n    }\n  }, [userData]); // Зависимость от userData, чтобы загрузить данные друзей после получения данных пользователя\n\n  // Функция для выбора чата с другом\n  const toggleChat = friendId => {\n    setChat(friendId); // Установка выбранного чата\n    Cookies.set('friend_chat_id', friendId); // Сохранение выбранного чата в cookies\n  };\n\n  // Проверка наличия данных о друзьях и выбранном чате перед отображением\n  if (!friends.length || !chat) return null;\n\n  // Отображение списка друзей и их аватаров\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [console.log(friends), friends.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: chat === item.friend_id ? 'chat_active' : 'chat' // Добавляем класс 'chat_active' для активного чата\n      ,\n\n      onClick: () => toggleChat(item.friend_id) // Вызов toggleChat при клике на элемент списка\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://127.0.0.1:8000${item.friend_avatar}`,\n        alt: \"\\u0410\\u0432\\u0430\\u0442\\u0430\\u0440 \\u0434\\u0440\\u0443\\u0433\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chat_name\",\n        children: item.friend_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)]\n    }, item.friend_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true);\n}\n_s(Chats, \"kOXrrWN9Ps683qGbTxGd3DzK5os=\");\n_c = Chats;\nvar _c;\n$RefreshReg$(_c, \"Chats\");","map":{"version":3,"names":["axios","useState","useEffect","Cookies","jsxDEV","_jsxDEV","Fragment","_Fragment","Chats","_s","userData","setUserData","friends","setFriends","chat","setChat","get","withCredentials","then","response","data","catch","error","console","id","firstFriendId","friend_id","set","toggleChat","friendId","length","children","log","map","item","className","onClick","src","friend_avatar","alt","fileName","_jsxFileName","lineNumber","columnNumber","friend_name","_c","$RefreshReg$"],"sources":["D:/MyProject/reactstart/src/components/Chats.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Cookies from 'js-cookie';\r\n\r\nexport function Chats() {\r\n    const [userData, setUserData] = useState(null); // Состояние для данных пользователя\r\n    const [friends, setFriends] = useState([]); // Состояние для списка друзей\r\n    const [chat, setChat] = useState(null); // Состояние для выбранного чата, изначально null\r\n\r\n    // Загрузка данных пользователя при монтировании компонента\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/v1/Current/', { withCredentials: true })\r\n            .then(response => {\r\n                setUserData(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n\r\n    // Загрузка списка друзей пользователя и установка начального чата\r\n    useEffect(() => {\r\n        if (userData) {\r\n            axios.get(`http://localhost:8000/api/v1/Friends/${userData.id}/`, { withCredentials: true })\r\n                .then(response => {\r\n                    setFriends(response.data);\r\n                    const firstFriendId = response.data[0].friend_id; // Получаем идентификатор первого друга\r\n                    setChat(firstFriendId); // Устанавливаем первого друга как выбранный чат\r\n                    Cookies.set('friend_chat_id', firstFriendId); // Сохраняем выбранный чат в cookies\r\n                })\r\n                .catch(error => {\r\n                    console.error('Ошибка при получении данных о друзьях:', error);\r\n                });\r\n        }\r\n    }, [userData]); // Зависимость от userData, чтобы загрузить данные друзей после получения данных пользователя\r\n\r\n    // Функция для выбора чата с другом\r\n    const toggleChat = (friendId) => {\r\n        setChat(friendId); // Установка выбранного чата\r\n        Cookies.set('friend_chat_id', friendId); // Сохранение выбранного чата в cookies\r\n    };\r\n\r\n    // Проверка наличия данных о друзьях и выбранном чате перед отображением\r\n    if (!friends.length || !chat) return null;\r\n\r\n    // Отображение списка друзей и их аватаров\r\n    return (\r\n        <>\r\n            {console.log(friends)}\r\n            {friends.map(item => (\r\n                <div\r\n                    className={chat === item.friend_id ? 'chat_active' : 'chat'} // Добавляем класс 'chat_active' для активного чата\r\n                    key={item.friend_id}\r\n                    onClick={() => toggleChat(item.friend_id)} // Вызов toggleChat при клике на элемент списка\r\n                >\r\n                    <img src={`http://127.0.0.1:8000${item.friend_avatar}`} alt=\"Аватар друга\" />\r\n                    <span className=\"chat_name\">{item.friend_name}</span>\r\n                </div>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEhC,OAAO,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACZF,KAAK,CAACgB,GAAG,CAAC,uCAAuC,EAAE;MAAEC,eAAe,EAAE;IAAK,CAAC,CAAC,CACxEC,IAAI,CAACC,QAAQ,IAAI;MACdR,WAAW,CAACQ,QAAQ,CAACC,IAAI,CAAC;IAC9B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACxB,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;;EAEN;EACApB,SAAS,CAAC,MAAM;IACZ,IAAIQ,QAAQ,EAAE;MACVV,KAAK,CAACgB,GAAG,CAAC,wCAAwCN,QAAQ,CAACc,EAAE,GAAG,EAAE;QAAEP,eAAe,EAAE;MAAK,CAAC,CAAC,CACvFC,IAAI,CAACC,QAAQ,IAAI;QACdN,UAAU,CAACM,QAAQ,CAACC,IAAI,CAAC;QACzB,MAAMK,aAAa,GAAGN,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAACM,SAAS,CAAC,CAAC;QAClDX,OAAO,CAACU,aAAa,CAAC,CAAC,CAAC;QACxBtB,OAAO,CAACwB,GAAG,CAAC,gBAAgB,EAAEF,aAAa,CAAC,CAAC,CAAC;MAClD,CAAC,CAAC,CACDJ,KAAK,CAACC,KAAK,IAAI;QACZC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAClE,CAAC,CAAC;IACV;EACJ,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB;EACA,MAAMkB,UAAU,GAAIC,QAAQ,IAAK;IAC7Bd,OAAO,CAACc,QAAQ,CAAC,CAAC,CAAC;IACnB1B,OAAO,CAACwB,GAAG,CAAC,gBAAgB,EAAEE,QAAQ,CAAC,CAAC,CAAC;EAC7C,CAAC;;EAED;EACA,IAAI,CAACjB,OAAO,CAACkB,MAAM,IAAI,CAAChB,IAAI,EAAE,OAAO,IAAI;;EAEzC;EACA,oBACIT,OAAA,CAAAE,SAAA;IAAAwB,QAAA,GACKR,OAAO,CAACS,GAAG,CAACpB,OAAO,CAAC,EACpBA,OAAO,CAACqB,GAAG,CAACC,IAAI,iBACb7B,OAAA;MACI8B,SAAS,EAAErB,IAAI,KAAKoB,IAAI,CAACR,SAAS,GAAG,aAAa,GAAG,MAAO,CAAC;MAAA;;MAE7DU,OAAO,EAAEA,CAAA,KAAMR,UAAU,CAACM,IAAI,CAACR,SAAS,CAAE,CAAC;MAAA;MAAAK,QAAA,gBAE3C1B,OAAA;QAAKgC,GAAG,EAAE,wBAAwBH,IAAI,CAACI,aAAa,EAAG;QAACC,GAAG,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7EtC,OAAA;QAAM8B,SAAS,EAAC,WAAW;QAAAJ,QAAA,EAAEG,IAAI,CAACU;MAAW;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA,GAJhDT,IAAI,CAACR,SAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKlB,CACR,CAAC;EAAA,eACJ,CAAC;AAEX;AAAClC,EAAA,CAzDeD,KAAK;AAAAqC,EAAA,GAALrC,KAAK;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
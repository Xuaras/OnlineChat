{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyProject\\\\reactstart\\\\src\\\\components\\\\ChatArea.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport chat_avatar from '../ava.jpg';\nimport online_img from '../shape.png';\nimport send_message from '../mail.png';\nimport '../Chat.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function ChatArea() {\n  _s();\n  const [userData, setUserData] = useState({});\n  const [friendData, setFriendData] = useState({});\n  const [myMessages, setMyMessages] = useState([]);\n  const [friendMessages, setFriendMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  useEffect(() => {\n    // Fetch current user data\n    axios.get('http://localhost:8000/api/v1/Current/', {\n      withCredentials: true\n    }).then(response => {\n      setUserData(response.data);\n    }).catch(error => {\n      console.error('Error fetching current user:', error);\n    });\n  }, []);\n  useEffect(() => {\n    // Fetch messages sent by current user to friend\n    if (userData.id && Cookies.get('friend_chat_id')) {\n      fetchMyMessages();\n    }\n  }, [userData.id]);\n  useEffect(() => {\n    // Fetch messages sent by friend to current user\n    if (Cookies.get('friend_chat_id') && userData.id) {\n      fetchFriendMessages();\n    }\n  }, [Cookies.get('friend_chat_id'), userData.id]);\n  useEffect(() => {\n    // Fetch friend's data\n    if (Cookies.get('friend_chat_id')) {\n      fetchFriendData();\n    }\n  }, [Cookies.get('friend_chat_id')]);\n  useEffect(() => {\n    // Polling for message updates every 10 seconds (adjust as needed)\n    const interval = setInterval(() => {\n      if (Cookies.get('friend_chat_id')) {\n        fetchMyMessages();\n        fetchFriendMessages();\n      }\n    }, 10000); // 10 seconds interval\n\n    return () => clearInterval(interval); // Cleanup on unmount or dependencies change\n  }, []);\n  const fetchMyMessages = () => {\n    axios.get(`http://127.0.0.1:8000/api/v1/Messages/${userData.id}/${Cookies.get('friend_chat_id')}/`).then(response => {\n      setMyMessages(response.data);\n    }).catch(error => {\n      console.error('Error fetching my messages:', error);\n    });\n  };\n  const fetchFriendMessages = () => {\n    axios.get(`http://127.0.0.1:8000/api/v1/Messages/${Cookies.get('friend_chat_id')}/${userData.id}/`).then(response => {\n      setFriendMessages(response.data);\n    }).catch(error => {\n      console.error('Error fetching friend messages:', error);\n    });\n  };\n  const fetchFriendData = () => {\n    axios.get(`http://localhost:8000/api/v1/Users/${Cookies.get('friend_chat_id')}/`, {\n      withCredentials: true\n    }).then(response => {\n      setFriendData(response.data);\n    }).catch(error => {\n      console.error('Error fetching friend data:', error);\n    });\n  };\n  const sendMessage = () => {\n    const messageData = {\n      sender: userData.id,\n      receiver: Cookies.get('friend_chat_id'),\n      content: newMessage\n    };\n    axios.post('http://localhost:8000/api/v1/Message/', messageData).then(response => {\n      console.log('Message sent successfully:', response.data);\n      setNewMessage(''); // Clear input after sending\n      fetchMyMessages(); // Refresh messages after sending\n    }).catch(error => {\n      console.error('Error sending message:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nick_name_area\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: friendData.avatar,\n        alt: \"\",\n        className: \"friend_avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: friendData.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"online\",\n        children: \"online\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: online_img,\n        alt: \"\",\n        className: \"online_circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_message_area\",\n      children: [myMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message own_message\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://127.0.0.1:8000${userData.avatar}`,\n          alt: \"My Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message_text\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this)]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)), friendMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"friend_message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"friend_message_text\",\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: friendData.avatar,\n          alt: \"Friend's Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this)]\n      }, msg.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"input_message\",\n      id: \"input_message\",\n      placeholder: \"Your message\",\n      className: \"input_message\",\n      value: newMessage,\n      onChange: e => setNewMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"send_message_bt\",\n      type: \"submit\",\n      onClick: sendMessage,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: send_message,\n        alt: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 85\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ChatArea, \"JMZ2gGpxCouxS/ZG19bgK1bLo2c=\");\n_c = ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["React","useState","axios","Cookies","chat_avatar","online_img","send_message","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatArea","_s","userData","setUserData","friendData","setFriendData","myMessages","setMyMessages","friendMessages","setFriendMessages","newMessage","setNewMessage","useEffect","get","withCredentials","then","response","data","catch","error","console","id","fetchMyMessages","fetchFriendMessages","fetchFriendData","interval","setInterval","clearInterval","sendMessage","messageData","sender","receiver","content","post","log","children","className","src","avatar","alt","fileName","_jsxFileName","lineNumber","columnNumber","username","map","msg","index","type","name","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/MyProject/reactstart/src/components/ChatArea.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nimport chat_avatar from '../ava.jpg';\r\nimport online_img from '../shape.png';\r\nimport send_message from '../mail.png';\r\nimport '../Chat.css';\r\n\r\nexport function ChatArea() {\r\n    const [userData, setUserData] = useState({});\r\n    const [friendData, setFriendData] = useState({});\r\n    const [myMessages, setMyMessages] = useState([]);\r\n    const [friendMessages, setFriendMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        // Fetch current user data\r\n        axios.get('http://localhost:8000/api/v1/Current/', { withCredentials: true })\r\n            .then(response => {\r\n                setUserData(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching current user:', error);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Fetch messages sent by current user to friend\r\n        if (userData.id && Cookies.get('friend_chat_id')) {\r\n            fetchMyMessages();\r\n        }\r\n    }, [userData.id]);\r\n\r\n    useEffect(() => {\r\n        // Fetch messages sent by friend to current user\r\n        if (Cookies.get('friend_chat_id') && userData.id) {\r\n            fetchFriendMessages();\r\n        }\r\n    }, [Cookies.get('friend_chat_id'), userData.id]);\r\n\r\n    useEffect(() => {\r\n        // Fetch friend's data\r\n        if (Cookies.get('friend_chat_id')) {\r\n            fetchFriendData();\r\n        }\r\n    }, [Cookies.get('friend_chat_id')]);\r\n\r\n    useEffect(() => {\r\n        // Polling for message updates every 10 seconds (adjust as needed)\r\n        const interval = setInterval(() => {\r\n            if (Cookies.get('friend_chat_id')) {\r\n                fetchMyMessages();\r\n                fetchFriendMessages();\r\n            }\r\n        }, 10000); // 10 seconds interval\r\n\r\n        return () => clearInterval(interval); // Cleanup on unmount or dependencies change\r\n    }, []);\r\n\r\n    const fetchMyMessages = () => {\r\n        axios.get(`http://127.0.0.1:8000/api/v1/Messages/${userData.id}/${Cookies.get('friend_chat_id')}/`)\r\n            .then(response => {\r\n                setMyMessages(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching my messages:', error);\r\n            });\r\n    };\r\n\r\n    const fetchFriendMessages = () => {\r\n        axios.get(`http://127.0.0.1:8000/api/v1/Messages/${Cookies.get('friend_chat_id')}/${userData.id}/`)\r\n            .then(response => {\r\n                setFriendMessages(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching friend messages:', error);\r\n            });\r\n    };\r\n\r\n    const fetchFriendData = () => {\r\n        axios.get(`http://localhost:8000/api/v1/Users/${Cookies.get('friend_chat_id')}/`, { withCredentials: true })\r\n            .then(response => {\r\n                setFriendData(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching friend data:', error);\r\n            });\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        const messageData = {\r\n            sender: userData.id,\r\n            receiver: Cookies.get('friend_chat_id'),\r\n            content: newMessage\r\n        };\r\n\r\n        axios.post('http://localhost:8000/api/v1/Message/', messageData)\r\n            .then(response => {\r\n                console.log('Message sent successfully:', response.data);\r\n                setNewMessage(''); // Clear input after sending\r\n                fetchMyMessages(); // Refresh messages after sending\r\n            })\r\n            .catch(error => {\r\n                console.error('Error sending message:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"nick_name_area\">\r\n                <img src={friendData.avatar} alt=\"\" className='friend_avatar'/>\r\n                <span>{friendData.username}</span>\r\n                <span className=\"online\">online</span>\r\n                <img src={online_img} alt=\"\" className=\"online_circle\"/>\r\n            </div>\r\n\r\n            <div className=\"chat_message_area\">\r\n                {myMessages.map((msg, index) => (\r\n                    <div key={msg.id} className=\"message own_message\">\r\n                        <img src={`http://127.0.0.1:8000${userData.avatar}`} alt=\"My Avatar\"/>\r\n                        <p className=\"message_text\">{msg.content}</p>\r\n                    </div>\r\n                ))}\r\n\r\n                {friendMessages.map((msg, index) => (\r\n                    <div key={msg.id} className=\"friend_message\">\r\n                        <p className=\"friend_message_text\">{msg.content}</p>\r\n                        <img src={friendData.avatar} alt=\"Friend's Avatar\"/>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <input\r\n                type=\"text\"\r\n                name=\"input_message\"\r\n                id=\"input_message\"\r\n                placeholder=\"Your message\"\r\n                className='input_message'\r\n                value={newMessage}\r\n                onChange={(e) => setNewMessage(e.target.value)}\r\n            />\r\n            <button className=\"send_message_bt\" type=\"submit\" onClick={sendMessage}><img src={send_message} alt=\"Send\"/></button>\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
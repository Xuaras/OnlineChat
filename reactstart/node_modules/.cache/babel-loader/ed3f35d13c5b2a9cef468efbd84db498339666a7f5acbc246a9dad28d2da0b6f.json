{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyProject\\\\reactstart\\\\src\\\\components\\\\ChatArea.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport chat_avatar from '../ava.jpg';\nimport online_img from '../shape.png';\nimport send_message from '../mail.png';\nimport { mergeMessages } from '../form.js';\nimport '../Chat.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function ChatArea() {\n  _s();\n  const [userData, setUserData] = useState({});\n  const [friendData, setFriendData] = useState({});\n  const [myMessages, setMyMessages] = useState([]);\n  const [friendMessages, setFriendMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState('');\n  useEffect(() => {\n    // Fetch current user data\n    axios.get('http://localhost:8000/api/v1/Current/', {\n      withCredentials: true\n    }).then(response => {\n      setUserData(response.data);\n    }).catch(error => {\n      console.error('Error fetching current user:', error);\n    });\n  }, []);\n  useEffect(() => {\n    // Fetch messages sent by current user to friend\n    if (userData.id && Cookies.get('friend_chat_id')) {\n      fetchMyMessages();\n    }\n  }, [userData.id]);\n  useEffect(() => {\n    // Fetch messages sent by friend to current user\n    if (Cookies.get('friend_chat_id') && userData.id) {\n      fetchFriendMessages();\n    }\n  }, [Cookies.get('friend_chat_id'), userData.id]);\n  useEffect(() => {\n    // Fetch friend's data\n    if (Cookies.get('friend_chat_id')) {\n      fetchFriendData();\n    }\n  }, [Cookies.get('friend_chat_id')]);\n  useEffect(() => {\n    // Polling for message updates every 10 seconds (adjust as needed)\n    const interval = setInterval(() => {\n      if (Cookies.get('friend_chat_id')) {\n        fetchMyMessages();\n        fetchFriendMessages();\n      }\n    }, 2000); // 10 seconds interval\n\n    return () => clearInterval(interval); // Cleanup on unmount or dependencies change\n  }, []);\n  const fetchMyMessages = () => {\n    axios.get(`http://127.0.0.1:8000/api/v1/Messages/${userData.id}/${Cookies.get('friend_chat_id')}/`).then(response => {\n      setMyMessages(response.data);\n    }).catch(error => {\n      console.error('Error fetching my messages:', error);\n    });\n  };\n  const fetchFriendMessages = () => {\n    axios.get(`http://127.0.0.1:8000/api/v1/Messages/${Cookies.get('friend_chat_id')}/${userData.id}/`).then(response => {\n      setFriendMessages(response.data);\n    }).catch(error => {\n      console.error('Error fetching friend messages:', error);\n    });\n  };\n  const fetchFriendData = () => {\n    axios.get(`http://localhost:8000/api/v1/Users/${Cookies.get('friend_chat_id')}/`, {\n      withCredentials: true\n    }).then(response => {\n      setFriendData(response.data);\n    }).catch(error => {\n      console.error('Error fetching friend data:', error);\n    });\n  };\n  const sendMessage = () => {\n    const messageContent = messageInput.trim();\n    if (messageContent === '') {\n      alert('Please enter a message.');\n      return;\n    }\n    const newMessage = {\n      sender: userData.id,\n      receiver: Cookies.get('friend_chat_id'),\n      content: messageContent,\n      time_of_message: new Date().toISOString()\n    };\n    axios.post(`http://127.0.0.1:8000/api/v1/Message/`, newMessage).then(response => {\n      // Assuming the message is successfully sent, update the message lists\n      fetchMyMessages();\n      fetchFriendMessages();\n\n      // Clear the message input field\n      setMessageInput('');\n    }).catch(error => {\n      console.error('Error sending message:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nick_name_area\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: friendData.avatar,\n        alt: \"\",\n        className: \"friend_avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: friendData.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"online\",\n        children: \"online\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: online_img,\n        alt: \"\",\n        className: \"online_circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_message_area\",\n      children: mergeMessages(myMessages, friendMessages).sort((msg1, msg2) => new Date(msg1.time_of_message) - new Date(msg2.time_of_message)).map((msg, index) => {\n        const isOwnMessage = msg.sender === userData.id;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${isOwnMessage ? 'own_message' : 'friend_message'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: isOwnMessage ? `http://127.0.0.1:8000${userData.avatar}` : friendData.avatar,\n            alt: isOwnMessage ? \"My Avatar\" : \"Friend's Avatar\",\n            className: \"message_avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: `message_text ${isOwnMessage ? '' : 'friend_message_text'}`,\n            children: msg.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)]\n        }, msg.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"input_message\",\n      id: \"input_message\",\n      placeholder: \"Your message\",\n      className: \"input_message\",\n      value: messageInput,\n      onChange: e => setMessageInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"send_message_bt\",\n      type: \"submit\",\n      onClick: sendMessage,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: send_message,\n        alt: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 85\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ChatArea, \"3SwAUNi/gFRm1vUS6cbpvVmvgP0=\");\n_c = ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["React","useState","useEffect","axios","Cookies","chat_avatar","online_img","send_message","mergeMessages","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatArea","_s","userData","setUserData","friendData","setFriendData","myMessages","setMyMessages","friendMessages","setFriendMessages","messageInput","setMessageInput","get","withCredentials","then","response","data","catch","error","console","id","fetchMyMessages","fetchFriendMessages","fetchFriendData","interval","setInterval","clearInterval","sendMessage","messageContent","trim","alert","newMessage","sender","receiver","content","time_of_message","Date","toISOString","post","children","className","src","avatar","alt","fileName","_jsxFileName","lineNumber","columnNumber","username","sort","msg1","msg2","map","msg","index","isOwnMessage","type","name","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/MyProject/reactstart/src/components/ChatArea.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nimport chat_avatar from '../ava.jpg';\r\nimport online_img from '../shape.png';\r\nimport send_message from '../mail.png';\r\nimport { mergeMessages } from '../form.js';\r\nimport '../Chat.css';\r\n\r\nexport function ChatArea() {\r\n    const [userData, setUserData] = useState({});\r\n    const [friendData, setFriendData] = useState({});\r\n    const [myMessages, setMyMessages] = useState([]);\r\n    const [friendMessages, setFriendMessages] = useState([]);\r\n    const [messageInput, setMessageInput] = useState('');\r\n\r\n    useEffect(() => {\r\n        // Fetch current user data\r\n        axios.get('http://localhost:8000/api/v1/Current/', { withCredentials: true })\r\n            .then(response => {\r\n                setUserData(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching current user:', error);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Fetch messages sent by current user to friend\r\n        if (userData.id && Cookies.get('friend_chat_id')) {\r\n            fetchMyMessages();\r\n        }\r\n    }, [userData.id]);\r\n\r\n    useEffect(() => {\r\n        // Fetch messages sent by friend to current user\r\n        if (Cookies.get('friend_chat_id') && userData.id) {\r\n            fetchFriendMessages();\r\n        }\r\n    }, [Cookies.get('friend_chat_id'), userData.id]);\r\n\r\n    useEffect(() => {\r\n        // Fetch friend's data\r\n        if (Cookies.get('friend_chat_id')) {\r\n            fetchFriendData();\r\n        }\r\n    }, [Cookies.get('friend_chat_id')]);\r\n\r\n    useEffect(() => {\r\n        // Polling for message updates every 10 seconds (adjust as needed)\r\n        const interval = setInterval(() => {\r\n            if (Cookies.get('friend_chat_id')) {\r\n                fetchMyMessages();\r\n                fetchFriendMessages();\r\n            }\r\n        }, 2000); // 10 seconds interval\r\n\r\n        return () => clearInterval(interval); // Cleanup on unmount or dependencies change\r\n    }, []);\r\n\r\n    const fetchMyMessages = () => {\r\n        axios.get(`http://127.0.0.1:8000/api/v1/Messages/${userData.id}/${Cookies.get('friend_chat_id')}/`)\r\n            .then(response => {\r\n                setMyMessages(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching my messages:', error);\r\n            });\r\n    };\r\n\r\n    const fetchFriendMessages = () => {\r\n        axios.get(`http://127.0.0.1:8000/api/v1/Messages/${Cookies.get('friend_chat_id')}/${userData.id}/`)\r\n            .then(response => {\r\n                setFriendMessages(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching friend messages:', error);\r\n            });\r\n    };\r\n\r\n    const fetchFriendData = () => {\r\n        axios.get(`http://localhost:8000/api/v1/Users/${Cookies.get('friend_chat_id')}/`, { withCredentials: true })\r\n            .then(response => {\r\n                setFriendData(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching friend data:', error);\r\n            });\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        const messageContent = messageInput.trim();\r\n        if (messageContent === '') {\r\n            alert('Please enter a message.');\r\n            return;\r\n        }\r\n\r\n        const newMessage = {\r\n            sender: userData.id,\r\n            receiver: Cookies.get('friend_chat_id'),\r\n            content: messageContent,\r\n            time_of_message: new Date().toISOString(),\r\n        };\r\n\r\n        axios.post(`http://127.0.0.1:8000/api/v1/Message/`, newMessage)\r\n            .then(response => {\r\n                // Assuming the message is successfully sent, update the message lists\r\n                fetchMyMessages();\r\n                fetchFriendMessages();\r\n\r\n                // Clear the message input field\r\n                setMessageInput('');\r\n            })\r\n            .catch(error => {\r\n                console.error('Error sending message:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"nick_name_area\">\r\n                <img src={friendData.avatar} alt=\"\" className='friend_avatar'/>\r\n                <span>{friendData.username}</span>\r\n                <span className=\"online\">online</span>\r\n                <img src={online_img} alt=\"\" className=\"online_circle\"/>\r\n            </div>\r\n            <div className=\"chat_message_area\">\r\n                {mergeMessages(myMessages, friendMessages)\r\n                    .sort((msg1, msg2) => new Date(msg1.time_of_message) - new Date(msg2.time_of_message))\r\n                    .map((msg, index) => {\r\n                    const isOwnMessage = msg.sender === userData.id;\r\n                return (\r\n                    <div key={msg.id} className={`message ${isOwnMessage ? 'own_message' : 'friend_message'}`}>\r\n                        <img src={isOwnMessage ? `http://127.0.0.1:8000${userData.avatar}` : friendData.avatar} alt={isOwnMessage ? \"My Avatar\" : \"Friend's Avatar\"} className=\"message_avatar\"/>\r\n                        <p className={`message_text ${isOwnMessage ? '' : 'friend_message_text'}`}>{msg.content}</p>\r\n                    </div>\r\n                );\r\n            })}\r\n</div>\r\n            <input\r\n                type=\"text\"\r\n                name=\"input_message\"\r\n                id=\"input_message\"\r\n                placeholder=\"Your message\"\r\n                className='input_message'\r\n                value={messageInput}\r\n                onChange={(e) => setMessageInput(e.target.value)}\r\n            />\r\n            <button className=\"send_message_bt\" type=\"submit\" onClick={sendMessage}><img src={send_message} alt=\"Send\"/></button>\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyProject\\\\reactstart\\\\src\\\\components\\\\Chats.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Chats() {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [users, setUsers] = useState(null); // Состояние для данных пользователя\n  const [friends, setFriends] = useState([]); // Состояние для списка друзей\n  const [chat, setChat] = useState(null); // Состояние для выбранного чата, изначально null\n\n  useEffect(() => {\n    axios.get('http://127.0.0.1:8000/api/v1/Users/?exclude_ids=1', {\n      withCredentials: true\n    }).then(response => {\n      setUserData(response.data);\n      console.log(userData);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n\n  // Загрузка данных пользователя при монтировании компонента\n  useEffect(() => {\n    axios.get('http://localhost:8000/api/v1/Current/', {\n      withCredentials: true\n    }).then(response => {\n      setUserData(response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n\n  // Загрузка списка друзей пользователя и установка начального чата\n  useEffect(() => {\n    if (userData) {\n      axios.get(`http://localhost:8000/api/v1/Friends/${userData.id}/`, {\n        withCredentials: true\n      }).then(response => {\n        setFriends(response.data);\n        if (response.data.length === 0) {\n          setFriends(null);\n        }\n        const firstFriendId = response.data[0].friend_id; // Получаем идентификатор первого друга\n        setChat(firstFriendId); // Устанавливаем первого друга как выбранный чат\n        Cookies.set('friend_chat_id', firstFriendId); // Сохраняем выбранный чат в cookies\n      }).catch(error => {\n        console.error('Ошибка при получении данных о друзьях:', error);\n      });\n    }\n  }, [userData]); // Зависимость от userData, чтобы загрузить данные друзей после получения данных пользователя\n\n  // Функция для выбора чата с другом\n  const toggleChat = friendId => {\n    setChat(friendId); // Установка выбранного чата\n    Cookies.set('friend_chat_id', friendId); // Сохранение выбранного чата в cookies\n  };\n  if (friends != null) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: friends.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: chat === item.friend_id ? 'chat_active' : 'chat' // Добавляем класс 'chat_active' для активного чата\n        ,\n\n        onClick: () => toggleChat(item.friend_id) // Вызов toggleChat при клике на элемент списка\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://127.0.0.1:8000${item.friend_avatar}`,\n          alt: \"\\u0410\\u0432\\u0430\\u0442\\u0430\\u0440 \\u0434\\u0440\\u0443\\u0433\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chat_name\",\n          children: item.friend_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, item.friend_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this))\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n}\n_s(Chats, \"shCt+SjAn0VpcSHm3kPe4wxkO30=\");\n_c = Chats;\nvar _c;\n$RefreshReg$(_c, \"Chats\");","map":{"version":3,"names":["axios","useState","useEffect","Cookies","jsxDEV","_jsxDEV","Fragment","_Fragment","Chats","_s","userData","setUserData","users","setUsers","friends","setFriends","chat","setChat","get","withCredentials","then","response","data","console","log","catch","error","id","length","firstFriendId","friend_id","set","toggleChat","friendId","children","map","item","className","onClick","src","friend_avatar","alt","fileName","_jsxFileName","lineNumber","columnNumber","friend_name","_c","$RefreshReg$"],"sources":["D:/MyProject/reactstart/src/components/Chats.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Cookies from 'js-cookie';\r\n\r\nexport function Chats() {\r\n    const [userData, setUserData] = useState(null);\r\n    const [users,setUsers] = useState(null); // Состояние для данных пользователя\r\n    const [friends, setFriends] = useState([]); // Состояние для списка друзей\r\n    const [chat, setChat] = useState(null); // Состояние для выбранного чата, изначально null\r\n\r\n    useEffect(() => {\r\n        axios.get('http://127.0.0.1:8000/api/v1/Users/?exclude_ids=1', {\r\n            withCredentials: true\r\n        })\r\n        .then(response => {\r\n            setUserData(response.data);\r\n            console.log(userData);\r\n        })\r\n        .catch(error => {\r\n            console.error(error);\r\n        });\r\n    }, []);\r\n    \r\n    // Загрузка данных пользователя при монтировании компонента\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8000/api/v1/Current/', { withCredentials: true })\r\n            .then(response => {\r\n                setUserData(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }, []);\r\n\r\n    // Загрузка списка друзей пользователя и установка начального чата\r\n    useEffect(() => {\r\n        if (userData) {\r\n            axios.get(`http://localhost:8000/api/v1/Friends/${userData.id}/`, { withCredentials: true })\r\n                .then(response => {\r\n                    setFriends(response.data);\r\n                    if(response.data.length === 0){\r\n                        setFriends(null);\r\n                    }\r\n                    const firstFriendId = response.data[0].friend_id; // Получаем идентификатор первого друга\r\n                    setChat(firstFriendId); // Устанавливаем первого друга как выбранный чат\r\n                    Cookies.set('friend_chat_id', firstFriendId); // Сохраняем выбранный чат в cookies\r\n                })\r\n                .catch(error => {\r\n                    console.error('Ошибка при получении данных о друзьях:', error);\r\n                });\r\n        }\r\n    }, [userData]); // Зависимость от userData, чтобы загрузить данные друзей после получения данных пользователя\r\n\r\n    // Функция для выбора чата с другом\r\n    const toggleChat = (friendId) => {\r\n        setChat(friendId); // Установка выбранного чата\r\n        Cookies.set('friend_chat_id', friendId); // Сохранение выбранного чата в cookies\r\n    };\r\n    if(friends !=null){\r\n    return (\r\n        <>\r\n            {friends.map(item => (\r\n                <div\r\n                    className={chat === item.friend_id ? 'chat_active' : 'chat'} // Добавляем класс 'chat_active' для активного чата\r\n                    key={item.friend_id}\r\n                    onClick={() => toggleChat(item.friend_id)} // Вызов toggleChat при клике на элемент списка\r\n                >\r\n                    <img src={`http://127.0.0.1:8000${item.friend_avatar}`} alt=\"Аватар друга\" />\r\n                    <span className=\"chat_name\">{item.friend_name}</span>\r\n                </div>\r\n            ))}\r\n        </>\r\n    );}\r\n    else{\r\n        return(\r\n        <>\r\n        \r\n        </>\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
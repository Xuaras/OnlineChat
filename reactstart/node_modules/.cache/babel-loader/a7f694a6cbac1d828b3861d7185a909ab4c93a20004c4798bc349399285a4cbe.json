{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyProject\\\\reactstart\\\\src\\\\components\\\\ChatArea.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport chat_avatar from '../ava.jpg';\nimport online_img from '../shape.png';\nimport send_message from '../mail.png';\nimport '../Chat.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function ChatArea() {\n  _s();\n  const [userData, setUserData] = useState({});\n  const [friendData, setFriendData] = useState({});\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    // Fetch current user data\n    axios.get('http://localhost:8000/api/v1/Current/', {\n      withCredentials: true\n    }).then(response => {\n      setUserData(response.data);\n    }).catch(error => {\n      console.error('Error fetching current user:', error);\n    });\n  }, []);\n  useEffect(() => {\n    // Fetch messages and friend's data when friend_chat_id changes\n    if (Cookies.get('friend_chat_id') && userData.id) {\n      axios.get(`http://127.0.0.1:8000/api/v1/Messages/${userData.id}/${Cookies.get('friend_chat_id')}/`).then(response => {\n        const myMessages = response.data.map(msg => ({\n          ...msg,\n          type: 'myMessage'\n        }));\n        return axios.get(`http://127.0.0.1:8000/api/v1/Messages/${Cookies.get('friend_chat_id')}/${userData.id}/`).then(response => {\n          const friendMessages = response.data.map(msg => ({\n            ...msg,\n            type: 'friendMessage'\n          }));\n          const combinedMessages = [...myMessages, ...friendMessages].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n          setMessages(combinedMessages);\n        });\n      }).catch(error => {\n        console.error('Error fetching messages:', error);\n      });\n      axios.get(`http://localhost:8000/api/v1/Users/${Cookies.get('friend_chat_id')}/`, {\n        withCredentials: true\n      }).then(response => {\n        setFriendData(response.data);\n      }).catch(error => {\n        console.error('Error fetching friend data:', error);\n      });\n    }\n  }, [Cookies.get('friend_chat_id'), userData.id]);\n  useEffect(() => {\n    // Polling for message updates every 10 seconds (adjust as needed)\n    const interval = setInterval(() => {\n      if (Cookies.get('friend_chat_id')) {\n        axios.get(`http://127.0.0.1:8000/api/v1/Messages/${userData.id}/${Cookies.get('friend_chat_id')}/`).then(response => {\n          const myMessages = response.data.map(msg => ({\n            ...msg,\n            type: 'myMessage'\n          }));\n          return axios.get(`http://127.0.0.1:8000/api/v1/Messages/${Cookies.get('friend_chat_id')}/${userData.id}/`).then(response => {\n            const friendMessages = response.data.map(msg => ({\n              ...msg,\n              type: 'friendMessage'\n            }));\n            const combinedMessages = [...myMessages, ...friendMessages].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n            setMessages(combinedMessages);\n          });\n        }).catch(error => {\n          console.error('Error fetching messages:', error);\n        });\n      }\n    }, 10000); // 10 seconds interval\n\n    return () => clearInterval(interval); // Cleanup on unmount or dependencies change\n  }, [Cookies.get('friend_chat_id'), userData.id]);\n  const sendMessage = () => {\n    // Implement sending message functionality\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nick_name_area\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: friendData.avatar,\n        alt: \"\",\n        className: \"friend_avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: friendData.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"online\",\n        children: \"online\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: online_img,\n        alt: \"\",\n        className: \"online_circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_message_area\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.type === 'myMessage' ? 'message own_message' : 'message friend_message',\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: msg.type === 'myMessage' ? `http://127.0.0.1:8000${userData.avatar}` : friendData.avatar,\n          alt: msg.type === 'myMessage' ? 'My Avatar' : \"Friend's Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: msg.type === 'myMessage' ? 'message_text' : 'friend_message_text',\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"input_message\",\n      id: \"input_message\",\n      placeholder: \"Your message\",\n      className: \"input_message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"send_message_bt\",\n      type: \"submit\",\n      onClick: sendMessage,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: send_message,\n        alt: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 85\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ChatArea, \"vhot3x2wOr3A8LFbFzL3KoE0sEc=\");\n_c = ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["React","useState","useEffect","axios","Cookies","chat_avatar","online_img","send_message","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatArea","_s","userData","setUserData","friendData","setFriendData","messages","setMessages","get","withCredentials","then","response","data","catch","error","console","id","myMessages","map","msg","type","friendMessages","combinedMessages","sort","a","b","Date","timestamp","interval","setInterval","clearInterval","sendMessage","children","className","src","avatar","alt","fileName","_jsxFileName","lineNumber","columnNumber","username","index","content","name","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/MyProject/reactstart/src/components/ChatArea.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nimport chat_avatar from '../ava.jpg';\r\nimport online_img from '../shape.png';\r\nimport send_message from '../mail.png';\r\nimport '../Chat.css';\r\n\r\nexport function ChatArea() {\r\n    const [userData, setUserData] = useState({});\r\n    const [friendData, setFriendData] = useState({});\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Fetch current user data\r\n        axios.get('http://localhost:8000/api/v1/Current/', { withCredentials: true })\r\n            .then(response => {\r\n                setUserData(response.data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching current user:', error);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Fetch messages and friend's data when friend_chat_id changes\r\n        if (Cookies.get('friend_chat_id') && userData.id) {\r\n            axios.get(`http://127.0.0.1:8000/api/v1/Messages/${userData.id}/${Cookies.get('friend_chat_id')}/`)\r\n                .then(response => {\r\n                    const myMessages = response.data.map(msg => ({ ...msg, type: 'myMessage' }));\r\n                    return axios.get(`http://127.0.0.1:8000/api/v1/Messages/${Cookies.get('friend_chat_id')}/${userData.id}/`)\r\n                        .then(response => {\r\n                            const friendMessages = response.data.map(msg => ({ ...msg, type: 'friendMessage' }));\r\n                            const combinedMessages = [...myMessages, ...friendMessages].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n                            setMessages(combinedMessages);\r\n                        })\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching messages:', error);\r\n                });\r\n\r\n            axios.get(`http://localhost:8000/api/v1/Users/${Cookies.get('friend_chat_id')}/`, { withCredentials: true })\r\n                .then(response => {\r\n                    setFriendData(response.data);\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching friend data:', error);\r\n                });\r\n        }\r\n    }, [Cookies.get('friend_chat_id'), userData.id]);\r\n\r\n    useEffect(() => {\r\n        // Polling for message updates every 10 seconds (adjust as needed)\r\n        const interval = setInterval(() => {\r\n            if (Cookies.get('friend_chat_id')) {\r\n                axios.get(`http://127.0.0.1:8000/api/v1/Messages/${userData.id}/${Cookies.get('friend_chat_id')}/`)\r\n                    .then(response => {\r\n                        const myMessages = response.data.map(msg => ({ ...msg, type: 'myMessage' }));\r\n                        return axios.get(`http://127.0.0.1:8000/api/v1/Messages/${Cookies.get('friend_chat_id')}/${userData.id}/`)\r\n                            .then(response => {\r\n                                const friendMessages = response.data.map(msg => ({ ...msg, type: 'friendMessage' }));\r\n                                const combinedMessages = [...myMessages, ...friendMessages].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n                                setMessages(combinedMessages);\r\n                            })\r\n                    })\r\n                    .catch(error => {\r\n                        console.error('Error fetching messages:', error);\r\n                    });\r\n            }\r\n        }, 10000); // 10 seconds interval\r\n\r\n        return () => clearInterval(interval); // Cleanup on unmount or dependencies change\r\n    }, [Cookies.get('friend_chat_id'), userData.id]);\r\n\r\n    const sendMessage = () => {\r\n        // Implement sending message functionality\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"nick_name_area\">\r\n                <img src={friendData.avatar} alt=\"\" className='friend_avatar'/>\r\n                <span>{friendData.username}</span>\r\n                <span className=\"online\">online</span>\r\n                <img src={online_img} alt=\"\" className=\"online_circle\"/>\r\n            </div>\r\n\r\n            <div className=\"chat_message_area\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={msg.type === 'myMessage' ? 'message own_message' : 'message friend_message'}>\r\n                        <img src={msg.type === 'myMessage' ? `http://127.0.0.1:8000${userData.avatar}` : friendData.avatar} alt={msg.type === 'myMessage' ? 'My Avatar' : \"Friend's Avatar\"} />\r\n                        <p className={msg.type === 'myMessage' ? 'message_text' : 'friend_message_text'}>{msg.content}</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <input type=\"text\" name=\"input_message\" id=\"input_message\" placeholder=\"Your message\" className='input_message'/>\r\n            <button className=\"send_message_bt\" type=\"submit\" onClick={sendMessage}><img src={send_message} alt=\"Send\"/></button>\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}